!function() {
    angular.module("handies", []);
}(), function() {
    angular.module("backendModels", [ "handies" ]);
}(), function() {
    angular.module("mst3k", [ "handies", "backendModels", "modals" ]);
}(), function() {
    angular.module("modals", []);
}(), function() {
    function baseModelFactory() {
        function BaseModel() {}
        return BaseModel;
    }
    angular.module("backendModels").factory("BaseModel", [ baseModelFactory ]);
}(), function() {
    function caseTransformFactory() {
        function snakeCaseToCamelCase(snakeCaseString) {
            function transformSnakeCaseMatchToCamelCase(snakeCaseMatch) {
                var matchedString = snakeCaseMatch[1];
                switch (matchedString) {
                  case "id":
                    return "ID";

                  default:
                    return matchedString.toUpperCase();
                }
            }
            return snakeCaseString.replace(/(_\w)/g, transformSnakeCaseMatchToCamelCase);
        }
        function camelCaseToSnakeCase(camelCaseString) {
            throw new Error("You should really implement this function bud!");
        }
        return {
            snakeCaseToCamelCase: snakeCaseToCamelCase,
            camelCaseToSnakeCase: camelCaseToSnakeCase
        };
    }
    angular.module("backendModels").factory("caseTransform", caseTransformFactory);
}(), function() {
    function createPopulatedInstanceFactory(populateInstance) {
        function createPopulatedInstance(ClassToUse, dataForPopulation) {
            var createdInstance = new ClassToUse();
            return populateInstance(createdInstance, dataForPopulation), createdInstance;
        }
        return createPopulatedInstance;
    }
    angular.module("backendModels").factory("createPopulatedInstance", [ "populateInstance", createPopulatedInstanceFactory ]);
}(), function() {
    function createPopulatedInstancesFactory(createPopulatedInstance) {
        function createPopulatedInstances(ClassToUse, dataForPopulation) {
            var createdInstances = [];
            return dataForPopulation.forEach(function(data) {
                createdInstances.push(createPopulatedInstance(ClassToUse, data));
            }), createdInstances;
        }
        return createPopulatedInstances;
    }
    angular.module("backendModels").factory("createPopulatedInstances", [ "createPopulatedInstance", createPopulatedInstancesFactory ]);
}(), function() {
    function extendFactory() {
        function extend(ChildClass, ParentClass) {
            ChildClass.prototype = Object.create(ParentClass.prototype), ChildClass.prototype.constructor = ChildClass, 
            "undefined" == typeof ChildClass.prototype.__proto__ && (ChildClass.prototype.__proto__ = ParentClass.prototype);
        }
        return extend;
    }
    angular.module("backendModels").factory("extend", extendFactory);
}(), function() {
    function populateInstanceFactory(relationManager, caseTransform, isArray) {
        function populateInstance(instanceToPopulate, dataForPopulation) {
            if ("object" != typeof dataForPopulation) throw new Error("Data for population must be an object");
            var dataKeys = Object.keys(dataForPopulation);
            dataKeys.forEach(function(dataKey) {
                var camelCasedKey = caseTransform.snakeCaseToCamelCase(dataKey), data = dataForPopulation[dataKey];
                hasPopulatableProperty(instanceToPopulate, camelCasedKey) && (relationManager.isHasOneRelation(instanceToPopulate, camelCasedKey) ? populateHasOneRelation(instanceToPopulate, camelCasedKey, data) : relationManager.isHasManyRelation(instanceToPopulate, camelCasedKey) ? populateHasManyRelation(instanceToPopulate, camelCasedKey, data) : instanceToPopulate[camelCasedKey] = data);
            });
        }
        function hasPopulatableProperty(instance, propertyName) {
            if (instance.hasOwnProperty(propertyName)) return !0;
            for (var prototypeToCheck = instance.constructor.prototype; prototypeToCheck && prototypeToCheck !== Object.prototype; ) {
                if (prototypeToCheck.hasOwnProperty(propertyName)) return !0;
                prototypeToCheck = prototypeToCheck.__proto__;
            }
            return !1;
        }
        function populateHasManyRelation(instanceToPopulate, propertyString, dataValues) {
            isArray(dataValues) && (instanceToPopulate[propertyString] = [], dataValues.forEach(function(dataValue) {
                var relationInstance = getRelationInstance(instanceToPopulate, propertyString, dataValue);
                instanceToPopulate[propertyString].push(relationInstance);
            }));
        }
        function populateHasOneRelation(instanceToPopulate, propertyString, data) {
            if ("object" == typeof data) {
                var relationInstance = getRelationInstance(instanceToPopulate, propertyString, data);
                instanceToPopulate[propertyString] = relationInstance;
            }
        }
        function getRelationInstance(instanceToPopulate, propertyString, data) {
            var RelationClass = relationManager.getRelationClass(instanceToPopulate, propertyString);
            if (data instanceof RelationClass) return data;
            var relationInstance = new RelationClass();
            return populateInstance(relationInstance, data), relationInstance;
        }
        return populateInstance;
    }
    angular.module("backendModels").factory("populateInstance", [ "relationManager", "caseTransform", "isArray", populateInstanceFactory ]);
}(), function() {
    function RelationFactory() {
        function Relation(relatedClass, relationType) {
            this.setRelatedClass(relatedClass), this.setRelationType(relationType);
        }
        function getRelatedClass(relatedClass) {
            return this.relatedClass;
        }
        function setRelatedClass(relatedClass) {
            this.relatedClass = relatedClass;
        }
        function setRelationType(relationType) {
            this.relationType = relationType;
        }
        function isHasOneRelation() {
            return this.relationType === Relation.TYPES.HAS_ONE;
        }
        function isHasManyRelation() {
            return this.relationType === Relation.TYPES.HAS_MANY;
        }
        return Relation.TYPES = {}, Relation.TYPES.HAS_MANY = "HAS_MANY", Relation.TYPES.HAS_ONE = "HAS_ONE", 
        Relation.prototype.relatedClass = void 0, Relation.prototype.relationType = void 0, 
        Relation.prototype.isHasOneRelation = isHasOneRelation, Relation.prototype.isHasManyRelation = isHasManyRelation, 
        Relation.prototype.setRelatedClass = setRelatedClass, Relation.prototype.setRelationType = setRelationType, 
        Relation.prototype.getRelatedClass = getRelatedClass, Relation;
    }
    angular.module("backendModels").factory("Relation", RelationFactory);
}(), function() {
    function RelationManagerFactory(Relation, getFirstDefined, getParentClass) {
        function RelationManager() {
            this.relationsString = "__RelationManager__relations_" + new Date().getTime();
        }
        function isHasOneRelation(valueToCheck, propertyString) {
            return "function" == typeof valueToCheck ? this.isHasOneRelationPropertyOnClass(valueToCheck, propertyString) : this.isHasOneRelationPropertyOnInstance(valueToCheck, propertyString);
        }
        function isHasManyRelation(valueToCheck, propertyString) {
            return "function" == typeof valueToCheck ? this.isHasManyRelationPropertyOnClass(valueToCheck, propertyString) : this.isHasManyRelationPropertyOnInstance(valueToCheck, propertyString);
        }
        function isHasOneRelationPropertyOnInstance(instanceToCheck, propertyString) {
            var instanceClass = instanceToCheck.constructor;
            return this.isHasOneRelationPropertyOnClass(instanceClass, propertyString);
        }
        function isHasOneRelationPropertyOnClass(classToCheck, propertyString) {
            if (!this.isRelationOnClass(classToCheck, propertyString)) return !1;
            var relation = this.getRelation(classToCheck, propertyString);
            return relation.isHasOneRelation();
        }
        function isHasManyRelationPropertyOnInstance(instanceToCheck, propertyString) {
            var instanceClass = instanceToCheck.constructor;
            return this.isHasManyRelationPropertyOnClass(instanceClass, propertyString);
        }
        function isHasManyRelationPropertyOnClass(classToCheck, propertyString) {
            if (!this.isRelationOnClass(classToCheck, propertyString)) return !1;
            var relation = this.getRelation(classToCheck, propertyString);
            return relation.isHasManyRelation();
        }
        function isRelationOnClass(classToCheck, propertyString) {
            var relations = this.getRelations(classToCheck);
            return "object" == typeof relations[propertyString];
        }
        function registerRelation(primaryClass, relationProperty, relationClass, relationType) {
            var primaryClassRelations = this.getDirectRelations(primaryClass);
            if ("undefined" != typeof primaryClassRelations[relationProperty]) throw new Error("Cannot override relation.");
            primaryClassRelations[relationProperty] = new Relation(relationClass, relationType);
        }
        function registerHasOneRelation(primaryClass, relationProperty, relationClass) {
            this.registerRelation(primaryClass, relationProperty, relationClass, Relation.TYPES.HAS_ONE);
        }
        function registerHasManyRelation(primaryClass, relationProperty, relationClass) {
            this.registerRelation(primaryClass, relationProperty, relationClass, Relation.TYPES.HAS_MANY);
        }
        function getDirectRelations(classToCheck) {
            return "undefined" == typeof classToCheck[this.relationsString] && (classToCheck[this.relationsString] = {}), 
            classToCheck[this.relationsString];
        }
        function getRelations(thingToCheck) {
            return "function" == typeof thingToCheck ? this.getRelationsFromClass(thingToCheck) : this.getRelationsFromClass(thingToCheck.constructor);
        }
        function getRelationsFromClass(classToCheck, childRelations) {
            var relationsToReturn = getFirstDefined(childRelations, {}), directRelations = this.getDirectRelations(classToCheck);
            Object.keys(directRelations).forEach(function(propertyString) {
                relationsToReturn[propertyString] = getFirstDefined(relationsToReturn[propertyString], directRelations[propertyString]);
            });
            var parentClass = getParentClass(classToCheck);
            return parentClass !== Object ? this.getRelationsFromClass(parentClass, relationsToReturn) : relationsToReturn;
        }
        function getRelation(thingToCheck, propertyString) {
            return this.getRelations(thingToCheck)[propertyString];
        }
        function getRelationClass(thingToCheck, propertyString) {
            return this.getRelation(thingToCheck, propertyString).getRelatedClass();
        }
        return RelationManager.prototype.isHasManyRelationPropertyOnInstance = isHasManyRelationPropertyOnInstance, 
        RelationManager.prototype.isHasManyRelationPropertyOnClass = isHasManyRelationPropertyOnClass, 
        RelationManager.prototype.isHasOneRelationPropertyOnInstance = isHasOneRelationPropertyOnInstance, 
        RelationManager.prototype.isHasOneRelationPropertyOnClass = isHasOneRelationPropertyOnClass, 
        RelationManager.prototype.isHasManyRelation = isHasManyRelation, RelationManager.prototype.isHasOneRelation = isHasOneRelation, 
        RelationManager.prototype.registerRelation = registerRelation, RelationManager.prototype.getRelations = getRelations, 
        RelationManager.prototype.isRelationOnClass = isRelationOnClass, RelationManager.prototype.getRelation = getRelation, 
        RelationManager.prototype.getRelationClass = getRelationClass, RelationManager.prototype.getRelationsFromClass = getRelationsFromClass, 
        RelationManager.prototype.registerHasOneRelation = registerHasOneRelation, RelationManager.prototype.registerHasManyRelation = registerHasManyRelation, 
        RelationManager.prototype.getDirectRelations = getDirectRelations, new RelationManager();
    }
    angular.module("backendModels").factory("relationManager", [ "Relation", "getFirstDefined", "getParentClass", RelationManagerFactory ]);
}(), function() {
    function getFirstDefinedFactory() {
        function getFirstDefined() {
            for (var i = 0; i < arguments.length; i++) if ("undefined" != typeof arguments[i]) return arguments[i];
        }
        return getFirstDefined;
    }
    angular.module("handies").factory("getFirstDefined", getFirstDefinedFactory);
}(), function() {
    function getParentClassFactory() {
        function getParentClass(classToCheck) {
            return "undefined" == typeof classToCheck.prototype.__proto__ ? Object : classToCheck.prototype.__proto__.constructor;
        }
        return getParentClass;
    }
    angular.module("handies").factory("getParentClass", getParentClassFactory);
}(), function() {
    function getRandomFactory() {
        function getRandom(min, max) {
            return Math.random() * (max - min) + min;
        }
        return getRandom;
    }
    angular.module("handies").factory("getRandom", getRandomFactory);
}(), function() {
    function hexToolsFactory(isInt, getFirstDefined) {
        function HexTools() {}
        function numberToHex(number) {
            if (!isInt(number)) throw new TypeError("Passed value must be an integer");
            return number.toString(16);
        }
        function numberToPaddedHex(number, padding, paddingCharacter) {
            var padCharacter = getFirstDefined(paddingCharacter, "0"), hexValue = this.numberToHex(number), zeroPadString = new Array(padding + 1).join(padCharacter), paddedValue = zeroPadString + hexValue;
            return paddedValue.slice(-padding);
        }
        function hexToNumber(hex) {
            return parseInt(hex, 16);
        }
        return HexTools.prototype.numberToHex = numberToHex, HexTools.prototype.numberToPaddedHex = numberToPaddedHex, 
        HexTools.prototype.hexToNumber = hexToNumber, new HexTools();
    }
    angular.module("handies").factory("hexTools", [ "isInt", "getFirstDefined", hexToolsFactory ]);
}(), function() {
    function isArrayFactory() {
        function isArray(value) {
            return "object" == typeof value && "number" == typeof value.length;
        }
        return isArray;
    }
    angular.module("handies").factory("isArray", isArrayFactory);
}(), function() {
    function isIntFactory(isNumber) {
        function isInt(value) {
            return isNumber && value % 1 === 0;
        }
        return isInt;
    }
    angular.module("handies").factory("isInt", [ "isNumber", isIntFactory ]);
}(), function() {
    function isNumberFactory() {
        function isNumber(value) {
            return Number(value) === value;
        }
        return isNumber;
    }
    angular.module("handies").factory("isNumber", isNumberFactory);
}(), function() {
    function IFrameModal() {
        var directive = {
            restrict: "E",
            scope: {
                visible: "=",
                iFrameLink: "="
            },
            controller: IFrameModalController,
            controllerAs: "iFrameModal",
            bindToController: !0,
            templateUrl: "templates/modals/iframe_modal.html"
        };
        return directive;
    }
    function IFrameModalController() {}
    angular.module("modals").directive("iFrameModal", [ IFrameModal ]);
}(), function() {
    function Modal() {
        var directive = {
            restrict: "E",
            scope: {
                visible: "="
            },
            transclude: !0,
            controller: ModalController,
            controllerAs: "modal",
            bindToController: !0,
            templateUrl: "templates/modals/modal.html"
        };
        return directive;
    }
    function ModalController() {}
    angular.module("modals").directive("modal", [ Modal ]);
}(), function() {
    function ExhibitFactory(BaseModel, extend) {
        function Exhibit(titleLines, backgroundImageUrl, iFrameVideoLink) {
            this.titleLines = titleLines, this.backgroundImage = "url(" + backgroundImageUrl + ")", 
            this.iFrameVideoLink = iFrameVideoLink, BaseModel.apply(this);
        }
        function getStyle() {
            return this.backgroundImage ? {
                "background-image": this.backgroundImage
            } : {};
        }
        return extend(Exhibit, BaseModel), Exhibit.prototype.titleLines = void 0, Exhibit.prototype.backgroundImage = void 0, 
        Exhibit.prototype.iFrameVideoLink = void 0, Exhibit.prototype.getStyle = getStyle, 
        Exhibit;
    }
    angular.module("mst3k").factory("Exhibit", [ "BaseModel", "extend", ExhibitFactory ]);
}(), function() {
    function FooterController(IconLink, $element) {
        this.$element = $element, this.followLinks = [ new IconLink("images/icons/follow/google_plus.png", "https://plus.google.com"), new IconLink("images/icons/follow/blogger.png", "http://www.blogger.com"), new IconLink("images/icons/follow/twitter.png", "http://www.twitter.com"), new IconLink("images/icons/follow/youtube.png", "http://www.youtube.com") ], 
        this.socialMediaLinks = [ new IconLink("images/icons/social_media/facebook.png", "http://www.facebook.com"), new IconLink("images/icons/social_media/twitter.png", "http://www.twitter.com"), new IconLink("images/icons/social_media/google_plus.png", "https://plus.google.com"), new IconLink("images/icons/social_media/pinterest.png", "http://www.pinterest.com") ], 
        this.scrollToTop = scrollToTop;
    }
    function scrollToTop() {
        angular.element("html, body").animate({
            scrollTop: 0
        }, 300);
    }
    angular.module("mst3k").controller("FooterController", [ "IconLink", "$element", FooterController ]);
}(), function() {
    function HeaderController() {
        this.logo = "images/logo.png";
    }
    angular.module("mst3k").controller("HeaderController", [ HeaderController ]);
}(), function() {
    function IconLinkFactory(BaseModel, extend) {
        function IconLink(icon, link) {
            this.icon = icon, this.link = link, BaseModel.apply(this);
        }
        return extend(IconLink, BaseModel), IconLink;
    }
    angular.module("mst3k").factory("IconLink", [ "BaseModel", "extend", IconLinkFactory ]);
}(), function() {
    function ShowFactory(BaseModel, extend, relationManager, Exhibit) {
        function Show() {
            BaseModel.apply(this);
        }
        return extend(Show, BaseModel), relationManager.registerHasManyRelation(Show, "exhibits", Exhibit), 
        Show;
    }
    angular.module("mst3k").factory("Show", [ "BaseModel", "extend", "relationManager", "Exhibit", ShowFactory ]);
}(), function() {
    function ShowSummaryController(Show, $sce, Exhibit) {
        this.show = new Show(), this.show.summaryTemplate = "templates/mst3k_summary.html", 
        this.show.exhibitHeaderTemplate = "templates/mst3k_exhibit_header.html", this.show.iFrameVideoLink = $sce.trustAsResourceUrl("http://www.youtube.com/embed/n_dZNLr2cME?rel=0&hd=1"), 
        this.show.exhibits = [ new Exhibit([ "Season 0", "KTMA" ], "images/exhibits/season_0_ktma.png", $sce.trustAsResourceUrl("http://www.youtube.com/embed/n_dZNLr2cME?rel=0&hd=1")), new Exhibit([ "Comedy Central", "The Golden Years" ], "images/exhibits/comedy_central_the_golden_years.png", $sce.trustAsResourceUrl("http://www.youtube.com/embed/n_dZNLr2cME?rel=0&hd=1")), new Exhibit([ "Sci-Fi,", "Crow's Voice,", "& Ram Chips" ], "images/exhibits/crows_voice_and_ram_chips.png", $sce.trustAsResourceUrl("http://www.youtube.com/embed/n_dZNLr2cME?rel=0&hd=1")) ], 
        this.exhibitionModalOpen = !1, this.selectedExhibit = null, this.selectExhibit = selectExhibit;
    }
    function selectExhibit(exhibit) {
        this.selectedExhibit = exhibit, this.exhibitionModalOpen = !0, console.log(this.exhibitionModalOpen);
    }
    angular.module("mst3k").controller("ShowSummaryController", [ "Show", "$sce", "Exhibit", ShowSummaryController ]);
}();